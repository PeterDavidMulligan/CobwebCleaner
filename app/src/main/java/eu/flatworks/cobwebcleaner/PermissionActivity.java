/*
 * Created on 04/02/18 11:25 by Peter Mulligan.
 * Copyright (c) 2018.
 */

package eu.flatworks.cobwebcleaner;

import android.app.AppOpsManager;
import android.app.usage.UsageStats;
import android.app.usage.UsageStatsManager;
import android.content.Context;
import android.content.Intent;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;

import java.util.List;

public class PermissionActivity extends AppCompatActivity {
    private static final String TAG = PermissionActivity.class.getSimpleName();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_permission);
        respondToPermissionState(hasUsageStatsPermission(this));
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        respondToPermissionState(hasUsageStatsPermission(this));
    }

    public static boolean hasUsageStatsPermission(@NonNull final Context context) {
        //Get 'application operations manager' and return false if it is null
        final AppOpsManager appOpsManager =
                (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);
        if (appOpsManager == null) { return false; }

        //check the appOpsManager to see if we have permission to access the usage stats
        //returning false if we cannot
        final int mode = appOpsManager.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS,
                android.os.Process.myUid(), context.getPackageName());
        if (mode != AppOpsManager.MODE_ALLOWED) { return false; }

        //Create a usage stats manager, use it to get a list of usage stats
        final long now = System.currentTimeMillis();
        final UsageStatsManager mUsageStatsManager =
                (UsageStatsManager) context.getSystemService(Context.USAGE_STATS_SERVICE);
        final List<UsageStats> stats =
                mUsageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_DAILY, now - 1000 * 10, now);

        //Check that list is not null. If it isn't, access has been granted.
        return (stats != null && !stats.isEmpty());
    }

    //Convenience method to respond to the boolean generated by 'hasUsageStatsPermission'
    private void respondToPermissionState(boolean hasPermission) {
        Snackbar sb;
        if(!hasPermission) {
            sb = Snackbar.make(findViewById(R.id.permission_layout),
                    "Usage Access needed.", Snackbar.LENGTH_INDEFINITE);
            sb.setAction("Grant Access", new GrantUsageAccessClick());
            sb.show();
        }
        else {
            sb = Snackbar.make(findViewById(R.id.permission_layout),
                    "Access granted!", Snackbar.LENGTH_LONG);
            sb.show();
        }
    }

    public class GrantUsageAccessClick implements View.OnClickListener{

        @Override
        public void onClick(View v) {
            Intent usageAccessIntent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);
            startActivity(usageAccessIntent);
        }
    }
}
